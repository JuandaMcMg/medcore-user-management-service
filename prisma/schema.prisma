// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  output        = "../src/generated/prisma"
  binaryTargets = ["native", "windows", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMINISTRADOR
  MEDICO
  ENFERMERO
  PACIENTE
}

enum IdType {
  CC // Cédula de Ciudadanía
  TI // Tarjeta de Identidad
  CE // Cédula de Extranjería
  PP // Pasaporte
  NIT // Número de Identificación Tributaria
}

enum Gender {
  MASCULINO
  FEMENINO
  OTRO
  NO_RESPONDE
}

enum BloodType {
  O_POSITIVE
  O_NEGATIVE
  A_POSITIVE
  A_NEGATIVE
  B_POSITIVE
  B_NEGATIVE
  AB_POSITIVE
  AB_NEGATIVE
}

enum DiagnosticState {
  ACTIVE
  ARCHIVED
  DELETED
}

model User {
  id                      String     @id @default(auto()) @map("_id") @db.ObjectId
  id_number               String     @unique
  id_type                 IdType
  email                   String     @unique
  fullname                String
  date_of_birth           DateTime
  age                     Int
  gender                  Gender?
  phone                   String?
  address                 String?
  city                    String?
  blood_type              BloodType?
  password                String
  role                    Role
  status                  String     @default("PENDING")
  verificationCode        String?
  verificationCodeExpires DateTime?
  emergencyContact        Json? // Estructura: {name: String, phone: String, relationship: String}
  profileImage            String?
  lastLogin               DateTime?
  createdAt               DateTime   @default(now())
  updatedAt               DateTime   @updatedAt

  // Relaciones
  activityLogs       ActivityLog[]
  userDeptRoles      UserDeptRole[]
  patient            Patient?
  diagnosticsCreated Diagnostic[]   @relation("DoctorDiagnostics")

  @@map("Users")
}

model ActivityLog {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String?
  userEmail  String?
  userName   String?
  action     String
  entityType String?
  entityId   String?
  oldValues  Json?
  newValues  Json?
  details    String?
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relaciones
  user User? @relation(fields: [userId], references: [id])

  @@map("activity_logs")
}

model Department {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones
  specialties   Specialty[]
  userDeptRoles UserDeptRole[]

  @@map("departments")
}

model Specialty {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  name         String   @unique
  departmentId String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relaciones
  department    Department     @relation(fields: [departmentId], references: [id])
  userDeptRoles UserDeptRole[]

  @@map("specialties")
}

model UserDeptRole {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String
  departmentId String
  role         Role
  specialtyId  String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relaciones
  user       User       @relation(fields: [userId], references: [id])
  department Department @relation(fields: [departmentId], references: [id])
  specialty  Specialty? @relation(fields: [specialtyId], references: [id])

  @@map("user_dept_roles")
}

model Patient {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  userId         String   @unique
  documentNumber String   @unique
  documentType   IdType
  birthDate      DateTime
  age            Int
  gender         Gender
  phone          String?
  address        String?
  status         String   @default("ACTIVE")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relaciones
  user        User         @relation(fields: [userId], references: [id])
  diagnostics Diagnostic[]

  @@map("patients")
}

model Diagnostic {
  id              String          @id @default(auto()) @map("_id") @db.ObjectId
  patientId       String
  doctorId        String
  title           String
  description     String
  symptoms        String
  diagnosis       String
  treatment       String
  observations    String?
  nextAppointment DateTime?
  state           DiagnosticState @default(ACTIVE)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  // Relaciones
  patient   Patient              @relation(fields: [patientId], references: [id], onDelete: Cascade)
  doctor    User                 @relation("DoctorDiagnostics", fields: [doctorId], references: [id])
  documents DiagnosticDocument[]

  @@index([patientId])
  @@index([doctorId])
  @@map("diagnostics")
}

model DiagnosticDocument {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  diagnosticId  String
  filename      String
  storeFilename String
  filePath      String
  fileType      String
  mimeType      String
  fileSize      Int
  description   String?
  uploadedBy    String
  createdAt     DateTime @default(now())

  // Relaciones
  diagnostic Diagnostic @relation(fields: [diagnosticId], references: [id], onDelete: Cascade)

  @@index([diagnosticId])
  @@map("diagnostic_documents")
}
